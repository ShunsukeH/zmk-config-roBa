#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 LA(TAB)>;
            key-positions = <36 0>;
        };

        tab2 {
            bindings = <&kp TAB>;
            key-positions = <0 1>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W         &kp E         &kp R                   &kp T                                      &kp Y        &kp U  &kp I      &kp O               &kp BACKSPACE
&kp A             &kp S         &kp D         &kp F                   &kp G        &none          &kp BACKSPACE  &kp H        &kp J  &kp K      &lt_to_layer_0 5 L  &kp SEMICOLON
&mt LEFT_SHIFT Z  &kp X         &kp C         &kp V                   &kp B        &kp MINUS      &kp EQUAL      &kp N        &kp M  &kp COMMA  &kp DOT             &kp SLASH
&kp LCTRL         &kp LEFT_WIN  &kp LEFT_ALT  &lt_to_layer_0 2 LANG1  &lt 2 SPACE  &mkp MB1       &lt 1 LANG2    &lt 3 ENTER                                        &kp SQT
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        FUNCTION {
            bindings = <
&kp LA(TAB)  &kp F2  &kp F3  &kp F4   &kp F5                       &kp F6  &kp F7  &kp F8  &kp F9  &kp F10
&none        &trans  &trans  &kp F11  &kp F12  &trans      &none   &kp F6  &kp F7  &kp F8  &kp F9  &kp F10
&trans       &trans  &trans  &trans   &trans   &trans      &trans  &trans  &trans  &trans  &trans  &kp F11
&trans       &trans  &trans  &trans   &trans   &trans      &trans  &trans                          &kp F12
            >;
        };

        NUM {
            bindings = <
&kp LS(EXCLAMATION)         &kp AT_SIGN      &kp HASH         &kp DOLLAR      &kp PERCENT                               &kp CARET          &kp AMPERSAND    &kp ASTERISK    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&kp NUMBER_1                &kp NUMBER_2     &kp NUMBER_3     &kp NUMBER_4    &kp NUMBER_5      &none          &kp DEL  &kp NUMBER_6       &kp NUMBER_7     &kp NUMBER_8    &kp NUMBER_9          &kp NUMBER_0
&mt LEFT_SHIFT KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp LEFT_BRACE  &kp LEFT_BRACKET  &kp EQUAL      &trans   &kp RIGHT_BRACKET  &kp RIGHT_BRACE  &kp LEFT_BRACE  &kp RIGHT_BRACE       &kp BACKSLASH
&trans                      &trans           &trans           &trans          &trans            &trans         &trans   &trans                                                                    &kp DEL
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                                                           &kp PAGE_UP          &kp UP_ARROW    &kp PAGE_DOWN    &trans  &kp P
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END             &trans                  &trans               &kp LEFT_ARROW       &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans  &trans
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &kp LA(LEFT_ARROW)  &kp LA(LEFT_ARROW)      &kp LA(RIGHT_ARROW)  &kp LA(RIGHT_ARROW)  &trans          &trans           &trans  &trans
&trans          &trans                  &trans          &trans                   &trans              &trans                  &trans               &trans                                                        &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB2  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                              &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                        &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans        &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans        &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &mkp MB2      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
